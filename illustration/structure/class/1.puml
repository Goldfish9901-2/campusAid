@startuml
skinparam classAttributeIconSize 0

abstract "接口层" as controller <<folder>> {
    [LoginController] --|> AuthController
    [RegisterController] --|> AuthController
    [AlipayController]
    [ComplaintController]
    [ErrandController]
    [ForumController]
    [ShopController]
    [StockController]
    [UserController]
    [ErrorController]
    [SessionKeys]
}

abstract "数据传输对象" as dto <<folder>> {
    [ApiResponse]
    [LoginRequest]
    [RegisterRequest]
    [VerifyRequest]
    [OrderDTO]
    [ProductTransaction]
    [ShopInfo]
    [ErrandOrderPreview]
    [ErrandOrderRequest]
    [ErrandOrderStatus]
    [Blog]
    [ReplyView]
    [ReportRequest]
    [Visibility]
    [KeywordType]
    [PostSortOrder]
    [ComplaintBlock]
    [ComplaintRequest]
}

abstract "异常处理" as handler <<folder>> {
    [GlobalExceptionHandler]
}

abstract "拦截器" as interceptor <<folder>> {
    [AuthInterceptor]
}

abstract "数据库映射" as mapper <<folder>> {
    [ChargeMapper]
    [ComplaintMapper]
    [ErrandMapper]
    [ForumMapper]
    [ShopMapper]
    [UserMapper]
    [ExceptionMapper]
    [ReplyMapper]
    [LikeBlogMapper]
    [GoodMapper]
    [OrderMapper]
    [TransactionMapper]
    [BanMapper]
}

abstract "实体模型" as model <<folder>> {
    [User]
    [Charge]
    [Complaint]
    [Errand]
    [Blog]
    [LikeBlog]
    [Reply]
    [ReplyTreeNode]
    [Good]
    [Shop]
    [ShopOrder]
}

abstract "服务实现" as service <<folder>> {
    [CampusAidException]
    [UserService]
    [LoginService]
    [RegisterService]
    [MailService]
    [ChargeService]
    [ComplaintService]
    [ErrandService]
    [ForumPostService]
    [ShopService]
    [StockService]
    [UploadFileSystemService]
    [ExceptionService]
}

abstract "工具类" as util <<folder>> {
    [BizContentField]
    [BizContentLoader]
    [ReplyTreeConverter]
}

abstract "配置类" as config <<folder>> {
    [WebConfig]
    [SecurityProperties]
    [AdminConfig]
    [AlipayTemplate]
}

class CampusAidApplication {
  +static void main(String[] args)
}

CampusAidApplication --|> SpringApplication

controller --> dto : 使用 DTO 数据
controller --> service : 调用服务逻辑
service --> mapper : 数据持久化操作
mapper --> model : 操作实体类
service --> util : 使用工具类
config --> service : 提供配置支持
handler --> controller : 全局异常捕获
interceptor --> controller : 请求拦截

title 校园互助平台主类结构图
@enduml
